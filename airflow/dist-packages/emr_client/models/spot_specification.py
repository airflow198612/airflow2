# coding: utf-8

"""
    EMR REST API - CEREBRO

    Used to spin up,describe,resize,list,terminate EMR

    OpenAPI spec version: 0.3.8
    Contact: Lst-DigitalTech.NGAP.Developers@nike.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SpotSpecification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, block_duration_minutes=None, timeout_action=None, timeout_duration_minutes=None):
        """
        SpotSpecification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'block_duration_minutes': 'int',
            'timeout_action': 'str',
            'timeout_duration_minutes': 'int'
        }

        self.attribute_map = {
            'block_duration_minutes': 'blockDurationMinutes',
            'timeout_action': 'timeoutAction',
            'timeout_duration_minutes': 'timeoutDurationMinutes'
        }

        self._block_duration_minutes = block_duration_minutes
        self._timeout_action = timeout_action
        self._timeout_duration_minutes = timeout_duration_minutes

    @property
    def block_duration_minutes(self):
        """
        Gets the block_duration_minutes of this SpotSpecification.
        The defined duration in minutes for the spot instance

        :return: The block_duration_minutes of this SpotSpecification.
        :rtype: int
        """
        return self._block_duration_minutes

    @block_duration_minutes.setter
    def block_duration_minutes(self, block_duration_minutes):
        """
        Sets the block_duration_minutes of this SpotSpecification.
        The defined duration in minutes for the spot instance

        :param block_duration_minutes: The block_duration_minutes of this SpotSpecification.
        :type: int
        """

        self._block_duration_minutes = block_duration_minutes

    @property
    def timeout_action(self):
        """
        Gets the timeout_action of this SpotSpecification.
        The EMR action to take when exceeding timeout duration

        :return: The timeout_action of this SpotSpecification.
        :rtype: str
        """
        return self._timeout_action

    @timeout_action.setter
    def timeout_action(self, timeout_action):
        """
        Sets the timeout_action of this SpotSpecification.
        The EMR action to take when exceeding timeout duration

        :param timeout_action: The timeout_action of this SpotSpecification.
        :type: str
        """
        allowed_values = ["SWITCH_TO_ON_DEMAND", "TERMINATE_CLUSTER"]
        if timeout_action not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_action` ({0}), must be one of {1}"
                .format(timeout_action, allowed_values)
            )

        self._timeout_action = timeout_action

    @property
    def timeout_duration_minutes(self):
        """
        Gets the timeout_duration_minutes of this SpotSpecification.
        The time in minutes before timeoutAction is taken

        :return: The timeout_duration_minutes of this SpotSpecification.
        :rtype: int
        """
        return self._timeout_duration_minutes

    @timeout_duration_minutes.setter
    def timeout_duration_minutes(self, timeout_duration_minutes):
        """
        Sets the timeout_duration_minutes of this SpotSpecification.
        The time in minutes before timeoutAction is taken

        :param timeout_duration_minutes: The timeout_duration_minutes of this SpotSpecification.
        :type: int
        """

        self._timeout_duration_minutes = timeout_duration_minutes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
