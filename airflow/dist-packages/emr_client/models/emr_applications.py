# coding: utf-8

"""
    EMR REST API - CEREBRO

    Used to spin up,describe,resize,list,terminate EMR

    OpenAPI spec version: 0.3.8
    Contact: Lst-DigitalTech.NGAP.Developers@nike.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EmrApplications(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hue=None, namenode=None, presto=None, shell=None, spark=None, yarn=None, zeppelin=None, spark_hive_site=None):
        """
        EmrApplications - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hue': 'str',
            'namenode': 'str',
            'presto': 'str',
            'shell': 'str',
            'spark': 'str',
            'yarn': 'str',
            'zeppelin': 'str',
            'spark_hive_site': 'str'
        }

        self.attribute_map = {
            'hue': 'hue',
            'namenode': 'namenode',
            'presto': 'presto',
            'shell': 'shell',
            'spark': 'spark',
            'yarn': 'yarn',
            'zeppelin': 'zeppelin',
            'spark_hive_site': 'spark_hive_site'
        }

        self._hue = hue
        self._namenode = namenode
        self._presto = presto
        self._shell = shell
        self._spark = spark
        self._yarn = yarn
        self._zeppelin = zeppelin
        self._spark_hive_site = spark_hive_site

    @property
    def hue(self):
        """
        Gets the hue of this EmrApplications.


        :return: The hue of this EmrApplications.
        :rtype: str
        """
        return self._hue

    @hue.setter
    def hue(self, hue):
        """
        Sets the hue of this EmrApplications.


        :param hue: The hue of this EmrApplications.
        :type: str
        """

        self._hue = hue

    @property
    def namenode(self):
        """
        Gets the namenode of this EmrApplications.


        :return: The namenode of this EmrApplications.
        :rtype: str
        """
        return self._namenode

    @namenode.setter
    def namenode(self, namenode):
        """
        Sets the namenode of this EmrApplications.


        :param namenode: The namenode of this EmrApplications.
        :type: str
        """

        self._namenode = namenode

    @property
    def presto(self):
        """
        Gets the presto of this EmrApplications.


        :return: The presto of this EmrApplications.
        :rtype: str
        """
        return self._presto

    @presto.setter
    def presto(self, presto):
        """
        Sets the presto of this EmrApplications.


        :param presto: The presto of this EmrApplications.
        :type: str
        """

        self._presto = presto

    @property
    def shell(self):
        """
        Gets the shell of this EmrApplications.


        :return: The shell of this EmrApplications.
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """
        Sets the shell of this EmrApplications.


        :param shell: The shell of this EmrApplications.
        :type: str
        """

        self._shell = shell

    @property
    def spark(self):
        """
        Gets the spark of this EmrApplications.


        :return: The spark of this EmrApplications.
        :rtype: str
        """
        return self._spark

    @spark.setter
    def spark(self, spark):
        """
        Sets the spark of this EmrApplications.


        :param spark: The spark of this EmrApplications.
        :type: str
        """

        self._spark = spark

    @property
    def yarn(self):
        """
        Gets the yarn of this EmrApplications.


        :return: The yarn of this EmrApplications.
        :rtype: str
        """
        return self._yarn

    @yarn.setter
    def yarn(self, yarn):
        """
        Sets the yarn of this EmrApplications.


        :param yarn: The yarn of this EmrApplications.
        :type: str
        """

        self._yarn = yarn

    @property
    def zeppelin(self):
        """
        Gets the zeppelin of this EmrApplications.


        :return: The zeppelin of this EmrApplications.
        :rtype: str
        """
        return self._zeppelin

    @zeppelin.setter
    def zeppelin(self, zeppelin):
        """
        Sets the zeppelin of this EmrApplications.


        :param zeppelin: The zeppelin of this EmrApplications.
        :type: str
        """

        self._zeppelin = zeppelin

    @property
    def spark_hive_site(self):
        """
        Gets the spark_hive_site of this EmrApplications.


        :return: The spark_hive_site of this EmrApplications.
        :rtype: str
        """
        return self._spark_hive_site

    @spark_hive_site.setter
    def spark_hive_site(self, spark_hive_site):
        """
        Sets the spark_hive_site of this EmrApplications.


        :param spark_hive_site: The spark_hive_site of this EmrApplications.
        :type: str
        """

        self._spark_hive_site = spark_hive_site

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
