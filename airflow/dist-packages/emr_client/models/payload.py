# coding: utf-8

"""
    EMR REST API - CEREBRO

    Used to spin up,describe,resize,list,terminate EMR

    OpenAPI spec version: 0.3.8
    Contact: Lst-DigitalTech.NGAP.Developers@nike.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Payload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_name=None, custom_dns_status=None, num_task_nodes=None, num_core_nodes=None, classification=None, master_inst_type=None, core_inst_type=None, task_inst_type=None, project_id=None, cost_center=None, emr_version=None, task_bid_type=None, group=None, applications=None, tags=None, bootstrapactions=None, emr_configurations=None, long_running_cluster=None, auto_scaling=None, core_max=None, core_min=None, task_max=None, task_min=None, core_scale_up=None, core_scale_down=None, task_scale_up=None, task_scale_down=None, is_instance_fleet=None, instance_fleets=None, cerebro_cdas=None, cerebro_hms=None):
        """
        Payload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_name': 'str',
            'custom_dns_status':'bool',
            'num_task_nodes': 'int',
            'num_core_nodes': 'int',
            'classification': 'str',
            'master_inst_type': 'str',
            'core_inst_type': 'str',
            'task_inst_type': 'str',
            'project_id': 'str',
            'cost_center': 'str',
            'emr_version': 'str',
            'task_bid_type': 'str',
            'group': 'str',
            'applications': 'list[str]',
            'tags': 'list[object]',
            'bootstrapactions': 'list[object]',
            'emr_configurations': 'list[object]',
            'long_running_cluster': 'bool',
            'auto_scaling': 'bool',
            'core_max': 'int',
            'core_min': 'int',
            'task_max': 'int',
            'task_min': 'int',
            'core_scale_up': 'int',
            'core_scale_down': 'int',
            'task_scale_up': 'int',
            'task_scale_down': 'int',
            'is_instance_fleet': 'bool',
            'instance_fleets': 'InstanceFleet',
            'cerebro_cdas': 'bool',
            'cerebro_hms': 'bool'
        }

        self.attribute_map = {
            'cluster_name': 'cluster_name',
            'custom_dns_status': 'custom_dns_status',
            'num_task_nodes': 'num_task_nodes',
            'num_core_nodes': 'num_core_nodes',
            'classification': 'classification',
            'master_inst_type': 'master_inst_type',
            'core_inst_type': 'core_inst_type',
            'task_inst_type': 'task_inst_type',
            'project_id': 'project_id',
            'cost_center': 'cost_center',
            'emr_version': 'emr_version',
            'task_bid_type': 'task_bid_type',
            'group': 'group',
            'applications': 'applications',
            'tags': 'tags',
            'bootstrapactions': 'bootstrapactions',
            'emr_configurations': 'emr_configurations',
            'long_running_cluster': 'long_running_cluster',
            'auto_scaling': 'auto_scaling',
            'core_max': 'core_max',
            'core_min': 'core_min',
            'task_max': 'task_max',
            'task_min': 'task_min',
            'core_scale_up': 'core_scale_up',
            'core_scale_down': 'core_scale_down',
            'task_scale_up': 'task_scale_up',
            'task_scale_down': 'task_scale_down',
            'is_instance_fleet': 'isInstanceFleet',
            'instance_fleets': 'instanceFleets',
            'cerebro_cdas': 'cerebro_cdas',
            'cerebro_hms': 'cerebro_hms'
        }

        self._cluster_name = cluster_name
        self._custom_dns_status = custom_dns_status
        self._num_task_nodes = num_task_nodes
        self._num_core_nodes = num_core_nodes
        self._classification = classification
        self._master_inst_type = master_inst_type
        self._core_inst_type = core_inst_type
        self._task_inst_type = task_inst_type
        self._project_id = project_id
        self._cost_center = cost_center
        self._emr_version = emr_version
        self._task_bid_type = task_bid_type
        self._group = group
        self._applications = applications
        self._tags = tags
        self._bootstrapactions = bootstrapactions
        self._emr_configurations = emr_configurations
        self._long_running_cluster = long_running_cluster
        self._auto_scaling = auto_scaling
        self._core_max = core_max
        self._core_min = core_min
        self._task_max = task_max
        self._task_min = task_min
        self._core_scale_up = core_scale_up
        self._core_scale_down = core_scale_down
        self._task_scale_up = task_scale_up
        self._task_scale_down = task_scale_down
        self._is_instance_fleet = is_instance_fleet
        self._instance_fleets = instance_fleets
        self._cerebro_cdas = cerebro_cdas
        self._cerebro_hms = cerebro_hms

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this Payload.
        Specify any name you like for EMR

        :return: The cluster_name of this Payload.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this Payload.
        Specify any name you like for EMR

        :param cluster_name: The cluster_name of this Payload.
        :type: str
        """

        if not cluster_name:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")
        if len(cluster_name) < 1:
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")

        self._cluster_name = cluster_name

    @property
    def custom_dns_status(self):
        """
        Gets the  custom_dns_status of this Payload.
        bootstrap emr with cerebro cdas, default is False

        :return: The custom_dns_status of this Payload.
        :rtype: bool
        """
        return self._custom_dns_status

    @custom_dns_status.setter
    def custom_dns_status(self, custom_dns_status):
        """
        Sets the custom_dns_status of this Payload.
        bootstrap emr with cerebro cdas, default is False

        :param custom_dns_status: The custom_dns_status of this Payload.
        :type: bool
        """

        self._custom_dns_status = custom_dns_status

    @property
    def num_task_nodes(self):
        """
        Gets the num_task_nodes of this Payload.
        Specify a number of EMR task  nodes to request

        :return: The num_task_nodes of this Payload.
        :rtype: int
        """
        return self._num_task_nodes

    @num_task_nodes.setter
    def num_task_nodes(self, num_task_nodes):
        """
        Sets the num_task_nodes of this Payload.
        Specify a number of EMR task  nodes to request

        :param num_task_nodes: The num_task_nodes of this Payload.
        :type: int
        """

        if not num_task_nodes:
            raise ValueError("Invalid value for `num_task_nodes`, must not be `None`")
        if num_task_nodes < 0.0:
            raise ValueError("Invalid value for `num_task_nodes`, must be a value greater than or equal to `0.0`")

        self._num_task_nodes = num_task_nodes

    @property
    def num_core_nodes(self):
        """
        Gets the num_core_nodes of this Payload.
        Specify a number of EMR code nodes to request

        :return: The num_core_nodes of this Payload.
        :rtype: int
        """
        return self._num_core_nodes

    @num_core_nodes.setter
    def num_core_nodes(self, num_core_nodes):
        """
        Sets the num_core_nodes of this Payload.
        Specify a number of EMR code nodes to request

        :param num_core_nodes: The num_core_nodes of this Payload.
        :type: int
        """

        if not num_core_nodes:
            raise ValueError("Invalid value for `num_core_nodes`, must not be `None`")
        if num_core_nodes < 1.0:
            raise ValueError("Invalid value for `num_core_nodes`, must be a value greater than or equal to `1.0`")

        self._num_core_nodes = num_core_nodes

    @property
    def classification(self):
        """
        Gets the classification of this Payload.
        Data security level, choose from bronze, silver, gold, platinum

        :return: The classification of this Payload.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """
        Sets the classification of this Payload.
        Data security level, choose from bronze, silver, gold, platinum

        :param classification: The classification of this Payload.
        :type: str
        """

        if not classification:
            raise ValueError("Invalid value for `classification`, must not be `None`")
        if len(classification) < 1:
            raise ValueError("Invalid value for `classification`, length must be greater than or equal to `1`")

        self._classification = classification

    @property
    def master_inst_type(self):
        """
        Gets the master_inst_type of this Payload.
        ec2 type for master instances

        :return: The master_inst_type of this Payload.
        :rtype: str
        """
        return self._master_inst_type

    @master_inst_type.setter
    def master_inst_type(self, master_inst_type):
        """
        Sets the master_inst_type of this Payload.
        ec2 type for master instances

        :param master_inst_type: The master_inst_type of this Payload.
        :type: str
        """

        if not master_inst_type:
            raise ValueError("Invalid value for `master_inst_type`, must not be `None`")
        if len(master_inst_type) < 1:
            raise ValueError("Invalid value for `master_inst_type`, length must be greater than or equal to `1`")

        self._master_inst_type = master_inst_type

    @property
    def core_inst_type(self):
        """
        Gets the core_inst_type of this Payload.
        ec2 type for core instances

        :return: The core_inst_type of this Payload.
        :rtype: str
        """
        return self._core_inst_type

    @core_inst_type.setter
    def core_inst_type(self, core_inst_type):
        """
        Sets the core_inst_type of this Payload.
        ec2 type for core instances

        :param core_inst_type: The core_inst_type of this Payload.
        :type: str
        """

        if not core_inst_type:
            raise ValueError("Invalid value for `core_inst_type`, must not be `None`")
        if len(core_inst_type) < 1:
            raise ValueError("Invalid value for `core_inst_type`, length must be greater than or equal to `1`")

        self._core_inst_type = core_inst_type

    @property
    def task_inst_type(self):
        """
        Gets the task_inst_type of this Payload.
        ec2 type for task instances

        :return: The task_inst_type of this Payload.
        :rtype: str
        """
        return self._task_inst_type

    @task_inst_type.setter
    def task_inst_type(self, task_inst_type):
        """
        Sets the task_inst_type of this Payload.
        ec2 type for task instances

        :param task_inst_type: The task_inst_type of this Payload.
        :type: str
        """

        if not task_inst_type:
            raise ValueError("Invalid value for `task_inst_type`, must not be `None`")
        if len(task_inst_type) < 1:
            raise ValueError("Invalid value for `task_inst_type`, length must be greater than or equal to `1`")

        self._task_inst_type = task_inst_type

    @property
    def project_id(self):
        """
        Gets the project_id of this Payload.
        Enter your Relay code

        :return: The project_id of this Payload.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this Payload.
        Enter your Relay code

        :param project_id: The project_id of this Payload.
        :type: str
        """

        if not project_id:
            raise ValueError("Invalid value for `project_id`, must not be `None`")
        if len(project_id) < 1:
            raise ValueError("Invalid value for `project_id`, length must be greater than or equal to `1`")

        self._project_id = project_id

    @property
    def cost_center(self):
        """
        Gets the cost_center of this Payload.
        Enter the cost center number for your project.

        :return: The cost_center of this Payload.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """
        Sets the cost_center of this Payload.
        Enter the cost center number for your project.

        :param cost_center: The cost_center of this Payload.
        :type: str
        """

        if not cost_center:
            raise ValueError("Invalid value for `cost_center`, must not be `None`")
        if len(cost_center) < 1:
            raise ValueError("Invalid value for `cost_center`, length must be greater than or equal to `1`")

        self._cost_center = cost_center

    @property
    def emr_version(self):
        """
        Gets the emr_version of this Payload.
        version of EMR can be specified 

        :return: The emr_version of this Payload.
        :rtype: str
        """
        return self._emr_version

    @emr_version.setter
    def emr_version(self, emr_version):
        """
        Sets the emr_version of this Payload.
        version of EMR can be specified 

        :param emr_version: The emr_version of this Payload.
        :type: str
        """

        if not emr_version:
            raise ValueError("Invalid value for `emr_version`, must not be `None`")
        if len(emr_version) < 1:
            raise ValueError("Invalid value for `emr_version`, length must be greater than or equal to `1`")

        self._emr_version = emr_version

    @property
    def task_bid_type(self):
        """
        Gets the task_bid_type of this Payload.
        type of task node

        :return: The task_bid_type of this Payload.
        :rtype: str
        """
        return self._task_bid_type

    @task_bid_type.setter
    def task_bid_type(self, task_bid_type):
        """
        Sets the task_bid_type of this Payload.
        type of task node

        :param task_bid_type: The task_bid_type of this Payload.
        :type: str
        """
        allowed_values = ["ON_DEMAND", "SPOT"]
        if task_bid_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_bid_type` ({0}), must be one of {1}"
                .format(task_bid_type, allowed_values)
            )

        self._task_bid_type = task_bid_type

    @property
    def group(self):
        """
        Gets the group of this Payload.
        Group User belongs to

        :return: The group of this Payload.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this Payload.
        Group User belongs to

        :param group: The group of this Payload.
        :type: str
        """

        if not group:
            raise ValueError("Invalid value for `group`, must not be `None`")
        if len(group) < 1:
            raise ValueError("Invalid value for `group`, length must be greater than or equal to `1`")

        self._group = group

    @property
    def applications(self):
        """
        Gets the applications of this Payload.
        emr applications can be specified like zepplin,presto

        :return: The applications of this Payload.
        :rtype: list[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """
        Sets the applications of this Payload.
        emr applications can be specified like zepplin,presto

        :param applications: The applications of this Payload.
        :type: list[str]
        """

        self._applications = applications

    @property
    def tags(self):
        """
        Gets the tags of this Payload.
        can provide tags to EMR,added to default tags eg:[{Key:tag_key,Value:tag_value}]

        :return: The tags of this Payload.
        :rtype: list[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Payload.
        can provide tags to EMR,added to default tags eg:[{Key:tag_key,Value:tag_value}]

        :param tags: The tags of this Payload.
        :type: list[object]
        """

        self._tags = tags

    @property
    def bootstrapactions(self):
        """
        Gets the bootstrapactions of this Payload.
         Bootstrap scripts to run at the EMR nodes spin up time

        :return: The bootstrapactions of this Payload.
        :rtype: list[object]
        """
        return self._bootstrapactions

    @bootstrapactions.setter
    def bootstrapactions(self, bootstrapactions):
        """
        Sets the bootstrapactions of this Payload.
         Bootstrap scripts to run at the EMR nodes spin up time

        :param bootstrapactions: The bootstrapactions of this Payload.
        :type: list[object]
        """

        self._bootstrapactions = bootstrapactions

    @property
    def emr_configurations(self):
        """
        Gets the emr_configurations of this Payload.
        List of configuration properties to pass to configure EMR

        :return: The emr_configurations of this Payload.
        :rtype: list[object]
        """
        return self._emr_configurations

    @emr_configurations.setter
    def emr_configurations(self, emr_configurations):
        """
        Sets the emr_configurations of this Payload.
        List of configuration properties to pass to configure EMR

        :param emr_configurations: The emr_configurations of this Payload.
        :type: list[object]
        """

        self._emr_configurations = emr_configurations

    @property
    def long_running_cluster(self):
        """
        Gets the long_running_cluster of this Payload.
        True or False. Default is False.

        :return: The long_running_cluster of this Payload.
        :rtype: bool
        """
        return self._long_running_cluster

    @long_running_cluster.setter
    def long_running_cluster(self, long_running_cluster):
        """
        Sets the long_running_cluster of this Payload.
        True or False. Default is False.

        :param long_running_cluster: The long_running_cluster of this Payload.
        :type: bool
        """

        self._long_running_cluster = long_running_cluster

    @property
    def auto_scaling(self):
        """
        Gets the auto_scaling of this Payload.
        To use Auto Scaling feature in EMR 

        :return: The auto_scaling of this Payload.
        :rtype: bool
        """
        return self._auto_scaling

    @auto_scaling.setter
    def auto_scaling(self, auto_scaling):
        """
        Sets the auto_scaling of this Payload.
        To use Auto Scaling feature in EMR 

        :param auto_scaling: The auto_scaling of this Payload.
        :type: bool
        """

        self._auto_scaling = auto_scaling

    @property
    def core_max(self):
        """
        Gets the core_max of this Payload.
        Maximum limit for core nodes to scale out

        :return: The core_max of this Payload.
        :rtype: int
        """
        return self._core_max

    @core_max.setter
    def core_max(self, core_max):
        """
        Sets the core_max of this Payload.
        Maximum limit for core nodes to scale out

        :param core_max: The core_max of this Payload.
        :type: int
        """

        if not core_max:
            raise ValueError("Invalid value for `core_max`, must not be `None`")
        if core_max < 0.0:
            raise ValueError("Invalid value for `core_max`, must be a value greater than or equal to `0.0`")

        self._core_max = core_max

    @property
    def core_min(self):
        """
        Gets the core_min of this Payload.
        Minimum limit for core nodes to scale in

        :return: The core_min of this Payload.
        :rtype: int
        """
        return self._core_min

    @core_min.setter
    def core_min(self, core_min):
        """
        Sets the core_min of this Payload.
        Minimum limit for core nodes to scale in

        :param core_min: The core_min of this Payload.
        :type: int
        """

        if not core_min:
            raise ValueError("Invalid value for `core_min`, must not be `None`")
        if core_min < 0.0:
            raise ValueError("Invalid value for `core_min`, must be a value greater than or equal to `0.0`")

        self._core_min = core_min

    @property
    def task_max(self):
        """
        Gets the task_max of this Payload.
        Maximum limit for task nodes to scale out

        :return: The task_max of this Payload.
        :rtype: int
        """
        return self._task_max

    @task_max.setter
    def task_max(self, task_max):
        """
        Sets the task_max of this Payload.
        Maximum limit for task nodes to scale out

        :param task_max: The task_max of this Payload.
        :type: int
        """

        if not task_max:
            raise ValueError("Invalid value for `task_max`, must not be `None`")
        if task_max < 0.0:
            raise ValueError("Invalid value for `task_max`, must be a value greater than or equal to `0.0`")

        self._task_max = task_max

    @property
    def task_min(self):
        """
        Gets the task_min of this Payload.
        Minimum limit for task nodes to scale in

        :return: The task_min of this Payload.
        :rtype: int
        """
        return self._task_min

    @task_min.setter
    def task_min(self, task_min):
        """
        Sets the task_min of this Payload.
        Minimum limit for task nodes to scale in

        :param task_min: The task_min of this Payload.
        :type: int
        """

        if not task_min:
            raise ValueError("Invalid value for `task_min`, must not be `None`")
        if task_min < 0.0:
            raise ValueError("Invalid value for `task_min`, must be a value greater than or equal to `0.0`")

        self._task_min = task_min

    @property
    def core_scale_up(self):
        """
        Gets the core_scale_up of this Payload.
        Number of core nodes to scale out each time.Default value is 1

        :return: The core_scale_up of this Payload.
        :rtype: int
        """
        return self._core_scale_up

    @core_scale_up.setter
    def core_scale_up(self, core_scale_up):
        """
        Sets the core_scale_up of this Payload.
        Number of core nodes to scale out each time.Default value is 1

        :param core_scale_up: The core_scale_up of this Payload.
        :type: int
        """

        if not core_scale_up:
            raise ValueError("Invalid value for `core_scale_up`, must not be `None`")
        if core_scale_up < 0.0:
            raise ValueError("Invalid value for `core_scale_up`, must be a value greater than or equal to `0.0`")

        self._core_scale_up = core_scale_up

    @property
    def core_scale_down(self):
        """
        Gets the core_scale_down of this Payload.
         Number of core nodes to scale in each time.Default value is -1

        :return: The core_scale_down of this Payload.
        :rtype: int
        """
        return self._core_scale_down

    @core_scale_down.setter
    def core_scale_down(self, core_scale_down):
        """
        Sets the core_scale_down of this Payload.
         Number of core nodes to scale in each time.Default value is -1

        :param core_scale_down: The core_scale_down of this Payload.
        :type: int
        """

        self._core_scale_down = core_scale_down

    @property
    def task_scale_up(self):
        """
        Gets the task_scale_up of this Payload.
        Number of task nodes to scale out each time.Default value is 2

        :return: The task_scale_up of this Payload.
        :rtype: int
        """
        return self._task_scale_up

    @task_scale_up.setter
    def task_scale_up(self, task_scale_up):
        """
        Sets the task_scale_up of this Payload.
        Number of task nodes to scale out each time.Default value is 2

        :param task_scale_up: The task_scale_up of this Payload.
        :type: int
        """

        if not task_scale_up:
            raise ValueError("Invalid value for `task_scale_up`, must not be `None`")
        if task_scale_up < 0.0:
            raise ValueError("Invalid value for `task_scale_up`, must be a value greater than or equal to `0.0`")

        self._task_scale_up = task_scale_up

    @property
    def task_scale_down(self):
        """
        Gets the task_scale_down of this Payload.
        Number of task nodes to scale in each time.Default value is -2

        :return: The task_scale_down of this Payload.
        :rtype: int
        """
        return self._task_scale_down

    @task_scale_down.setter
    def task_scale_down(self, task_scale_down):
        """
        Sets the task_scale_down of this Payload.
        Number of task nodes to scale in each time.Default value is -2

        :param task_scale_down: The task_scale_down of this Payload.
        :type: int
        """

        self._task_scale_down = task_scale_down

    @property
    def is_instance_fleet(self):
        """
        Gets the is_instance_fleet of this Payload.
        Whether to use Instance Fleet feature of EMR

        :return: The is_instance_fleet of this Payload.
        :rtype: bool
        """
        return self._is_instance_fleet

    @is_instance_fleet.setter
    def is_instance_fleet(self, is_instance_fleet):
        """
        Sets the is_instance_fleet of this Payload.
        Whether to use Instance Fleet feature of EMR

        :param is_instance_fleet: The is_instance_fleet of this Payload.
        :type: bool
        """

        self._is_instance_fleet = is_instance_fleet

    @property
    def instance_fleets(self):
        """
        Gets the instance_fleets of this Payload.


        :return: The instance_fleets of this Payload.
        :rtype: InstanceFleet
        """
        return self._instance_fleets

    @instance_fleets.setter
    def instance_fleets(self, instance_fleets):
        """
        Sets the instance_fleets of this Payload.


        :param instance_fleets: The instance_fleets of this Payload.
        :type: InstanceFleet
        """

        self._instance_fleets = instance_fleets

    @property
    def cerebro_cdas(self):
        """
        Gets the cerebro_cdas of this Payload.
        bootstrap emr with cerebro cdas, default is False

        :return: The cerebro_cdas of this Payload.
        :rtype: bool
        """
        return self._cerebro_cdas

    @cerebro_cdas.setter
    def cerebro_cdas(self, cerebro_cdas):
        """
        Sets the cerebro_cdas of this Payload.
        bootstrap emr with cerebro cdas, default is False

        :param cerebro_cdas: The cerebro_cdas of this Payload.
        :type: bool
        """

        self._cerebro_cdas = cerebro_cdas

    @property
    def cerebro_hms(self):
        """
        Gets the cerebro_hms of this Payload.
        point EMR hive to remote cerebro metastore, default is False

        :return: The cerebro_hms of this Payload.
        :rtype: bool
        """
        return self._cerebro_hms

    @cerebro_hms.setter
    def cerebro_hms(self, cerebro_hms):
        """
        Sets the cerebro_hms of this Payload.
        point EMR hive to remote cerebro metastore, default is False

        :param cerebro_hms: The cerebro_hms of this Payload.
        :type: bool
        """

        self._cerebro_hms = cerebro_hms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
