# coding: utf-8

"""
    EMR REST API - CEREBRO

    Used to spin up,describe,resize,list,terminate EMR

    OpenAPI spec version: 0.3.8
    Contact: Lst-DigitalTech.NGAP.Developers@nike.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstanceTypeConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bid_price_as_percentage_of_on_demand_price=None, instance_type=None, weighted_capacity=None):
        """
        InstanceTypeConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bid_price_as_percentage_of_on_demand_price': 'int',
            'instance_type': 'str',
            'weighted_capacity': 'int'
        }

        self.attribute_map = {
            'bid_price_as_percentage_of_on_demand_price': 'bidPriceAsPercentageOfOnDemandPrice',
            'instance_type': 'instanceType',
            'weighted_capacity': 'weightedCapacity'
        }

        self._bid_price_as_percentage_of_on_demand_price = bid_price_as_percentage_of_on_demand_price
        self._instance_type = instance_type
        self._weighted_capacity = weighted_capacity

    @property
    def bid_price_as_percentage_of_on_demand_price(self):
        """
        Gets the bid_price_as_percentage_of_on_demand_price of this InstanceTypeConfig.
        The number representing bid price as percentage of on demand price

        :return: The bid_price_as_percentage_of_on_demand_price of this InstanceTypeConfig.
        :rtype: int
        """
        return self._bid_price_as_percentage_of_on_demand_price

    @bid_price_as_percentage_of_on_demand_price.setter
    def bid_price_as_percentage_of_on_demand_price(self, bid_price_as_percentage_of_on_demand_price):
        """
        Sets the bid_price_as_percentage_of_on_demand_price of this InstanceTypeConfig.
        The number representing bid price as percentage of on demand price

        :param bid_price_as_percentage_of_on_demand_price: The bid_price_as_percentage_of_on_demand_price of this InstanceTypeConfig.
        :type: int
        """

        self._bid_price_as_percentage_of_on_demand_price = bid_price_as_percentage_of_on_demand_price

    @property
    def instance_type(self):
        """
        Gets the instance_type of this InstanceTypeConfig.
        The instance type of the spot instance

        :return: The instance_type of this InstanceTypeConfig.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this InstanceTypeConfig.
        The instance type of the spot instance

        :param instance_type: The instance_type of this InstanceTypeConfig.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def weighted_capacity(self):
        """
        Gets the weighted_capacity of this InstanceTypeConfig.
        The number of units that a provisioned instance of this type provides toward fulfilling the target capacity

        :return: The weighted_capacity of this InstanceTypeConfig.
        :rtype: int
        """
        return self._weighted_capacity

    @weighted_capacity.setter
    def weighted_capacity(self, weighted_capacity):
        """
        Sets the weighted_capacity of this InstanceTypeConfig.
        The number of units that a provisioned instance of this type provides toward fulfilling the target capacity

        :param weighted_capacity: The weighted_capacity of this InstanceTypeConfig.
        :type: int
        """

        self._weighted_capacity = weighted_capacity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
