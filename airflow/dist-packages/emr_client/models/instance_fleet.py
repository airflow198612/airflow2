# coding: utf-8

"""
    EMR REST API - CEREBRO

    Used to spin up,describe,resize,list,terminate EMR

    OpenAPI spec version: 0.3.8
    Contact: Lst-DigitalTech.NGAP.Developers@nike.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstanceFleet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, instance_fleet_type=None, target_on_demand_capacity=None, target_spot_capacity=None, instance_type_configs=None, launch_specifications=None):
        """
        InstanceFleet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'instance_fleet_type': 'str',
            'target_on_demand_capacity': 'int',
            'target_spot_capacity': 'int',
            'instance_type_configs': 'InstanceTypeConfig',
            'launch_specifications': 'LaunchSpecification'
        }

        self.attribute_map = {
            'instance_fleet_type': 'instanceFleetType',
            'target_on_demand_capacity': 'targetOnDemandCapacity',
            'target_spot_capacity': 'targetSpotCapacity',
            'instance_type_configs': 'instanceTypeConfigs',
            'launch_specifications': 'launchSpecifications'
        }

        self._instance_fleet_type = instance_fleet_type
        self._target_on_demand_capacity = target_on_demand_capacity
        self._target_spot_capacity = target_spot_capacity
        self._instance_type_configs = instance_type_configs
        self._launch_specifications = launch_specifications

    @property
    def instance_fleet_type(self):
        """
        Gets the instance_fleet_type of this InstanceFleet.
        The node type of the instance fleet

        :return: The instance_fleet_type of this InstanceFleet.
        :rtype: str
        """
        return self._instance_fleet_type

    @instance_fleet_type.setter
    def instance_fleet_type(self, instance_fleet_type):
        """
        Sets the instance_fleet_type of this InstanceFleet.
        The node type of the instance fleet

        :param instance_fleet_type: The instance_fleet_type of this InstanceFleet.
        :type: str
        """
        allowed_values = ["MASTER", "CORE", "TASK"]
        if instance_fleet_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_fleet_type` ({0}), must be one of {1}"
                .format(instance_fleet_type, allowed_values)
            )

        self._instance_fleet_type = instance_fleet_type

    @property
    def target_on_demand_capacity(self):
        """
        Gets the target_on_demand_capacity of this InstanceFleet.
        The target capacity of Spot units for the instance fleet

        :return: The target_on_demand_capacity of this InstanceFleet.
        :rtype: int
        """
        return self._target_on_demand_capacity

    @target_on_demand_capacity.setter
    def target_on_demand_capacity(self, target_on_demand_capacity):
        """
        Sets the target_on_demand_capacity of this InstanceFleet.
        The target capacity of Spot units for the instance fleet

        :param target_on_demand_capacity: The target_on_demand_capacity of this InstanceFleet.
        :type: int
        """

        self._target_on_demand_capacity = target_on_demand_capacity

    @property
    def target_spot_capacity(self):
        """
        Gets the target_spot_capacity of this InstanceFleet.
        The target capacity of Spot units for the instance fleet

        :return: The target_spot_capacity of this InstanceFleet.
        :rtype: int
        """
        return self._target_spot_capacity

    @target_spot_capacity.setter
    def target_spot_capacity(self, target_spot_capacity):
        """
        Sets the target_spot_capacity of this InstanceFleet.
        The target capacity of Spot units for the instance fleet

        :param target_spot_capacity: The target_spot_capacity of this InstanceFleet.
        :type: int
        """

        self._target_spot_capacity = target_spot_capacity

    @property
    def instance_type_configs(self):
        """
        Gets the instance_type_configs of this InstanceFleet.
        The InstanceTypeConfigs for EMR instance fleets

        :return: The instance_type_configs of this InstanceFleet.
        :rtype: InstanceTypeConfig
        """
        return self._instance_type_configs

    @instance_type_configs.setter
    def instance_type_configs(self, instance_type_configs):
        """
        Sets the instance_type_configs of this InstanceFleet.
        The InstanceTypeConfigs for EMR instance fleets

        :param instance_type_configs: The instance_type_configs of this InstanceFleet.
        :type: InstanceTypeConfig
        """

        self._instance_type_configs = instance_type_configs

    @property
    def launch_specifications(self):
        """
        Gets the launch_specifications of this InstanceFleet.
        An empty wrapper object around the spot spec assuming aws will add props later

        :return: The launch_specifications of this InstanceFleet.
        :rtype: LaunchSpecification
        """
        return self._launch_specifications

    @launch_specifications.setter
    def launch_specifications(self, launch_specifications):
        """
        Sets the launch_specifications of this InstanceFleet.
        An empty wrapper object around the spot spec assuming aws will add props later

        :param launch_specifications: The launch_specifications of this InstanceFleet.
        :type: LaunchSpecification
        """

        self._launch_specifications = launch_specifications

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
